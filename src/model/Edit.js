/**
 * Shotstack
 * The Shotstack API is a video editing service that allows for the automated creation of videos using JSON. You can configure an edit and POST it to the Shotstack API which will render your video and provide a file location when complete. For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 5.0.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Output', 'model/Timeline'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Output'), require('./Timeline'));
  } else {
    // Browser globals (root is window)
    if (!root.ShotstackSdk) {
      root.ShotstackSdk = {};
    }
    root.ShotstackSdk.Edit = factory(root.ShotstackSdk.ApiClient, root.ShotstackSdk.Output, root.ShotstackSdk.Timeline);
  }
}(this, function(ApiClient, Output, Timeline) {
  'use strict';



  /**
   * The Edit model module.
   * @module model/Edit
   * @version v1
   */

  /**
   * Constructs a new <code>Edit</code>.
   * An edit defines the content of the video in a timeline and the output format.
   * @alias module:model/Edit
   * @class
   * @param timeline {module:model/Timeline} 
   * @param output {module:model/Output} 
   */
  var exports = function(timeline, output) {
    var _this = this;

    _this['timeline'] = timeline;
    _this['output'] = output;
  };

  /**
   * Constructs a <code>Edit</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Edit} obj Optional instance to populate.
   * @return {module:model/Edit} The populated <code>Edit</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('timeline')) {
        obj['timeline'] = Timeline.constructFromObject(data['timeline']);
      }
      if (data.hasOwnProperty('output')) {
        obj['output'] = Output.constructFromObject(data['output']);
      }
      if (data.hasOwnProperty('callback')) {
        obj['callback'] = ApiClient.convertToType(data['callback'], 'String');
      }
      if (data.hasOwnProperty('disk')) {
        obj['disk'] = ApiClient.convertToType(data['disk'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/Timeline} timeline
   */
  exports.prototype['timeline'] = undefined;
  /**
   * @member {module:model/Output} output
   */
  exports.prototype['output'] = undefined;
  /**
   * An optional webhook callback URL used to receive status notifications when a render completes or fails. See [webhooks](https://shotstack.gitbook.io/docs/guides/architecting-an-application/webhooks) for  more details.
   * @member {String} callback
   */
  exports.prototype['callback'] = undefined;
  /**
   * The disk type to use for storing footage and assets for each render. See [disk types](https://shotstack.gitbook.io/docs/guides/architecting-an-application/disk-types) for more details. <ul>   <li>`local` - optimised for high speed rendering with up to 512MB storage</li>   <li>`mount` - optimised for larger file sizes and longer videos with 5GB for source footage and 512MB for output render</li> </ul>
   * @member {module:model/Edit.DiskEnum} disk
   * @default 'local'
   */
  exports.prototype['disk'] = 'local';


  /**
   * @return {module:model/Timeline}
   */
  exports.prototype.getTimeline = function() {
    return this['timeline'];
  }

  /**
   * @param {module:model/Timeline} timeline
   */
  exports.prototype.setTimeline = function(timeline) {
    this['timeline'] = timeline;
    return this;
  }


  /**
   * @return {module:model/Output}
   */
  exports.prototype.getOutput = function() {
    return this['output'];
  }

  /**
   * @param {module:model/Output} output
   */
  exports.prototype.setOutput = function(output) {
    this['output'] = output;
    return this;
  }


  /**
   * Returns An optional webhook callback URL used to receive status notifications when a render completes or fails. See [webhooks](https://shotstack.gitbook.io/docs/guides/architecting-an-application/webhooks) for  more details.
   * @return {String}
   */
  exports.prototype.getCallback = function() {
    return this['callback'];
  }

  /**
   * Sets An optional webhook callback URL used to receive status notifications when a render completes or fails. See [webhooks](https://shotstack.gitbook.io/docs/guides/architecting-an-application/webhooks) for  more details.
   * @param {String} callback An optional webhook callback URL used to receive status notifications when a render completes or fails. See [webhooks](https://shotstack.gitbook.io/docs/guides/architecting-an-application/webhooks) for  more details.
   */
  exports.prototype.setCallback = function(callback) {
    this['callback'] = callback;
    return this;
  }


  /**
   * Returns The disk type to use for storing footage and assets for each render. See [disk types](https://shotstack.gitbook.io/docs/guides/architecting-an-application/disk-types) for more details. <ul>   <li>`local` - optimised for high speed rendering with up to 512MB storage</li>   <li>`mount` - optimised for larger file sizes and longer videos with 5GB for source footage and 512MB for output render</li> </ul>
   * @return {module:model/Edit.DiskEnum}
   */
  exports.prototype.getDisk = function() {
    return this['disk'];
  }

  /**
   * Sets The disk type to use for storing footage and assets for each render. See [disk types](https://shotstack.gitbook.io/docs/guides/architecting-an-application/disk-types) for more details. <ul>   <li>`local` - optimised for high speed rendering with up to 512MB storage</li>   <li>`mount` - optimised for larger file sizes and longer videos with 5GB for source footage and 512MB for output render</li> </ul>
   * @param {module:model/Edit.DiskEnum} disk The disk type to use for storing footage and assets for each render. See [disk types](https://shotstack.gitbook.io/docs/guides/architecting-an-application/disk-types) for more details. <ul>   <li>`local` - optimised for high speed rendering with up to 512MB storage</li>   <li>`mount` - optimised for larger file sizes and longer videos with 5GB for source footage and 512MB for output render</li> </ul>
   */
  exports.prototype.setDisk = function(disk) {
    this['disk'] = disk;
  }


  /**
   * Allowed values for the <code>disk</code> property.
   * @enum {String}
   * @readonly
   */
  exports.DiskEnum = {
    /**
     * value: "local"
     * @const
     */
    "local": "local",
    /**
     * value: "mount"
     * @const
     */
    "mount": "mount"  };


  return exports;
}));


